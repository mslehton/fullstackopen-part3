{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","persons","getAll","axios","get","create","newObject","post","update","id","put","concat","remove","delete","Lista","props","react_default","a","createElement","map","person","App_Henkilo","key","name","f","Henkilo","number","onClick","Notification","_ref","message","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","findStr","str","i","length","addPerson","event","preventDefault","index","state","newName","personObject","newNumber","personService","then","response","setState","data","notification","window","confirm","console","log","catch","error","setTimeout","removePerson","filter","handleNameChange","target","value","handleNumberChange","handleFilterChange","toLowerCase","_this2","_this3","filteredPersons","indexOf","App_Notification","onChange","onSubmit","type","App_Lista","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PACMA,EAAU,eAkBDC,EAAA,CAAEC,OAhBF,WACb,OAAOC,IAAMC,IAAIJ,IAeMK,OAZV,SAACC,GACd,OAAOH,IAAMI,KAAKP,EAASM,IAWIE,OARlB,SAACC,EAAIH,GAClB,OAAOH,IAAMO,IAAN,GAAAC,OAAaX,EAAb,KAAAW,OAAwBF,GAAMH,IAOEM,OAJ1B,SAACH,GACd,OAAON,IAAMU,OAAN,GAAAF,OAAgBX,EAAhB,KAAAW,OAA2BF,MCZ7BK,EAAQ,SAACC,GAAD,OACdC,EAAAC,EAAAC,cAAA,WACOF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,aACNF,EAAAC,EAAAC,cAAA,aACCH,EAAMd,QAAQkB,IAAI,SAAAC,GAAM,OAAIJ,EAAAC,EAAAC,cAACG,EAAD,CAASD,OAAQA,EAAQE,IAAKF,EAAOG,KAAMC,EAAGT,EAAMS,UAM7EC,EAAU,SAACV,GAAD,OACfC,EAAAC,EAAAC,cAAA,MAAII,IAAKP,EAAMK,OAAOG,MAAMP,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OAAOG,MAAUP,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OAAOM,QAAYV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQS,QAASZ,EAAMS,EAAET,EAAMK,OAAOX,GAAGM,EAAMK,OAAOG,OAAtD,aAGrFK,EAAe,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACtB,OAAgB,OAAZA,EACK,KAGPd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,gBACZD,IAgKQE,cAzJb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KAoBTyB,QAAU,SAACvC,EAAQwC,GAElB,IAAK,IAAIC,EAAE,EAAGA,EAAIzC,EAAQ0C,OAAQD,IACjC,GAAIzC,EAAQyC,GAAGnB,OAAOkB,EAErB,OAAOC,EAIT,OAAQ,GA9BWT,EAkCpBW,UAAY,SAACC,GAEZA,EAAMC,iBACN,IAAIC,EAAQd,EAAKO,QAAQP,EAAKe,MAAM/C,QAAQgC,EAAKe,MAAMC,SACjDC,EAAe,CACpB3B,KAAMU,EAAKe,MAAMC,QACjBvB,OAAQO,EAAKe,MAAMG,WAIpB,GAAGJ,EAAM,EAERK,EACC/C,OAAO6C,GACPG,KAAK,SAAAC,GACLrB,EAAKsB,SAAS,CACbtD,QAASgC,EAAKe,MAAM/C,QAAQU,OAAO2C,EAASE,MAC5CP,QAAS,GACTE,UAAW,GACXM,aAAc,gBAAexB,EAAKe,MAAMC,gBAItC,KAAGS,OAAOC,QAAQ1B,EAAKe,MAAMC,QAAQ,yDA4BzC,OA1BA,IAAMxC,EAAKwB,EAAKe,MAAM/C,QAAQ8C,GAAOtC,GACpCmD,QAAQC,IAAI,aAAapD,GAC1B2C,EACC5C,OAAOC,EAAGyC,GACVG,KAAK,SAAAC,GACLrB,EAAKsB,SAAS,CACbtD,QAASgC,EAAKe,MAAM/C,QAAQkB,IAAI,SAAAC,GAAM,OAAIA,EAAOX,KAAOA,EAAKW,EAASkC,EAASE,OAC/EP,QAAS,GACTE,UAAW,GACXM,aAAc,cAAgBxB,EAAKe,MAAMC,YAG1Ca,MAAM,SAAAC,GACNX,EACC/C,OAAO6C,GACPG,KAAK,SAAAC,GACLrB,EAAKsB,SAAS,CACbtD,QAASgC,EAAKe,MAAM/C,QAAQkB,IAAI,SAAAC,GAAM,OAAIA,EAAOX,KAAOA,EAAKW,EAASkC,EAASE,OAC/EP,QAAS,GACTE,UAAW,GACXM,aAAc,cAAgBxB,EAAKe,MAAMC,cAQ7Ce,WAAW,WACV/B,EAAKsB,SAAS,CAACE,aAAc,QAC3B,MAzFgBxB,EA6FpBgC,aAAe,SAACxD,EAAGc,GAAJ,OACf,WAEImC,OAAOC,QAAQ,gBAAgBpC,EAAK,MACtC6B,EACCxC,OAAOH,GACP4C,KAAK,SAAAC,GAELrB,EAAKsB,SAAS,CACbtD,QAASgC,EAAKe,MAAM/C,QAAQiE,OAAO,SAAA9C,GAAM,OAAIA,EAAOX,KAAOA,IAC3DwC,QAAS,GACTE,UAAW,GACXM,aAAc,eAAiBlC,MAIlCyC,WAAW,WACV/B,EAAKsB,SAAS,CAACE,aAAc,QAC3B,OA/GgBxB,EAmHnBkC,iBAAmB,SAACtB,GAClBZ,EAAKsB,SAAS,CAAEN,QAASJ,EAAMuB,OAAOC,SApHrBpC,EAuHnBqC,mBAAqB,SAACzB,GACpBZ,EAAKsB,SAAS,CAAEJ,UAAWN,EAAMuB,OAAOC,SAxHvBpC,EA2HnBsC,mBAAqB,SAAC1B,GACpBZ,EAAKsB,SAAS,CAAEW,OAAQrB,EAAMuB,OAAOC,MAAMG,iBA1H3CvC,EAAKe,MAAQ,CACd/C,QAAS,GACNgD,QAAS,GACZE,UAAW,GACXe,OAAQ,GACRT,aAAc,MAPIxB,mFAYA,IAAAwC,EAAArC,KACnBgB,EACClD,SACAmD,KAAK,SAAAC,GACLmB,EAAKlB,SAAS,CAACtD,QAASqD,EAASE,0CAiHzB,IAAAkB,EAAAtC,KACJuC,EAAkBvC,KAAKY,MAAM/C,QAAQiE,OAAO,SAAA9C,GAAM,OAAIA,EAAOG,KAAKiD,cAAcI,QAAQF,EAAK1B,MAAMkB,SAAS,IAE/G,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACNF,EAAAC,EAAAC,cAAC2D,EAAD,CAAc/C,QAASM,KAAKY,MAAMS,eAF9B,8BAGczC,EAAAC,EAAAC,cAAA,SAAOmD,MAAOjC,KAAKY,MAAMkB,OAAQY,SAAU1C,KAAKmC,qBAClEvD,EAAAC,EAAAC,cAAA,8BACMF,EAAAC,EAAAC,cAAA,QAAM6D,SAAU3C,KAAKQ,WACnB5B,EAAAC,EAAAC,cAAA,oBACQF,EAAAC,EAAAC,cAAA,SAAOmD,MAAOjC,KAAKY,MAAMC,QAAS6B,SAAU1C,KAAK+B,mBAChEnD,EAAAC,EAAAC,cAAA,WAFO,kBAGQF,EAAAC,EAAAC,cAAA,SAAOmD,MAAOjC,KAAKY,MAAMG,UAAW2B,SAAU1C,KAAKkC,qBAClEtD,EAAAC,EAAAC,cAAA,WACSF,EAAAC,EAAAC,cAAA,UAAQ8D,KAAK,UAAb,iBAGVhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAOhF,QAAS0E,EAAiBT,OAAQ9B,KAAKY,MAAMkB,OAAQ1C,EAAGY,KAAK6B,uBApJpDiB,IAAMC,WCnBJC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.945fab30.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react';\nimport personService from './services/persons'\n\n\n const Lista = (props) => (\n <div>\n        <h3>Numerot</h3>\n        <table>\n\t\t<tbody>\n\t\t{props.persons.map(person => <Henkilo person={person} key={person.name} f={props.f}/>)}\n        </tbody>\n\t\t</table>\n</div>\n)\n\nconst Henkilo = (props) => (\n\t<tr key={props.person.name}><td>{props.person.name}</td><td>{props.person.number}</td><td><button onClick={props.f(props.person.id,props.person.name)}>Poista</button></td></tr>\n)\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"Notification\">\n      {message}\n    </div>\n  )\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n\t  persons: [],\n      newName: '',\n\t  newNumber: '',\n\t  filter: '',\n\t  notification: null\n    }\n  }\n  \n  \n\tcomponentDidMount() {\n\t\tpersonService\n\t\t.getAll()\n\t\t.then(response => {\n\t\t\tthis.setState({persons: response.data})\n\t\t})\n\t}\n  \n  \n\tfindStr = (persons,str) =>{\n\n\t\tfor (let i=0; i < persons.length; i++) {\n\t\t\tif (persons[i].name===str) {\n\t\t\t//\tconsole.log(\"found \",i)\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t\n\taddPerson = (event) => {\n\n\t\tevent.preventDefault()\n\t\tlet index = this.findStr(this.state.persons,this.state.newName)\n\t\tconst personObject = {\n\t\t\tname: this.state.newName,\n\t\t\tnumber: this.state.newNumber\n\t\t\t//\tid: this.state.newName\n\t\t}\n\t\t\n\t\tif(index<0) {\n\n\t\t\tpersonService\n\t\t\t.create(personObject)\n\t\t\t.then(response => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tpersons: this.state.persons.concat(response.data),\n\t\t\t\t\tnewName: '',\n\t\t\t\t\tnewNumber: '',\n\t\t\t\t\tnotification: 'Lisättiin ' + this.state.newName\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\telse if(window.confirm(this.state.newName+\" on jo luettelossa. Korvataanko vanha numero uudella?\")) {\n\t\t\t\n\t\t\tconst id = this.state.persons[index].id\n\t\t\t\tconsole.log(\"muutetaan \",id)\n\t\t\tpersonService\n\t\t\t.update(id,personObject)\n\t\t\t.then(response => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tpersons: this.state.persons.map(person => person.id !== id ? person : response.data),\n\t\t\t\t\tnewName: '',\n\t\t\t\t\tnewNumber: '',\n\t\t\t\t\tnotification: 'Muokattiin ' + this.state.newName\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tpersonService\n\t\t\t\t.create(personObject)\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tpersons: this.state.persons.map(person => person.id !== id ? person : response.data),\n\t\t\t\t\t\tnewName: '',\n\t\t\t\t\t\tnewNumber: '',\n\t\t\t\t\t\tnotification: 'Muokattiin ' + this.state.newName\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\treturn\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({notification: null})\n\t\t}, 5000)\n\t}\n  \n  \n\tremovePerson = (id,name) => (\n\t() =>  {\n\n\t\tif(window.confirm('Poistetaanko '+name+'?')) {\n\t\t\tpersonService\n\t\t\t.remove(id)\n\t\t\t.then(response => {\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tpersons: this.state.persons.filter(person => person.id !== id),\n\t\t\t\t\tnewName: '',\n\t\t\t\t\tnewNumber: '',\n\t\t\t\t\tnotification: 'Poistettiin ' + name\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({notification: null})\n\t\t}, 5000)\n\t})\n  \n  \n  handleNameChange = (event) => {\n    this.setState({ newName: event.target.value })\n  }\n  \n  handleNumberChange = (event) => {\n    this.setState({ newNumber: event.target.value })\n  }\n  \n  handleFilterChange = (event) => {\n    this.setState({ filter: event.target.value.toLowerCase() })\n\t\n  }  \n  \n  \n  render() {\n\tconst filteredPersons = this.state.persons.filter(person => person.name.toLowerCase().indexOf(this.state.filter)>=0)\n\t   \n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n\t\t<Notification message={this.state.notification}/>\n\t\trajaa näytettäviä <input value={this.state.filter} onChange={this.handleFilterChange}/>\n\t\t<h3>Lisää uusi</h3>\n        <form onSubmit={this.addPerson}>\n          <div>\n            Nimi: <input value={this.state.newName} onChange={this.handleNameChange}/>\n\t\t\t<br/>\n\t\t\tPuhelinnumero: <input value={this.state.newNumber} onChange={this.handleNumberChange}/>\n\t\t\t<br/>\n            <button type=\"submit\">lisää</button>\n          </div>\n        </form>\n\t\t<Lista persons={filteredPersons} filter={this.state.filter} f={this.removePerson}/>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}